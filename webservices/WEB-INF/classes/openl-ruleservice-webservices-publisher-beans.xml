<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<import resource="classpath:META-INF/cxf/cxf.xml" />

	<!-- Data binding type in WebServices(set it to the "serverPrototype" bean). -->
	<bean id="serviceDescriptionConfigurationReadXsiTypesFactoryBean"
		class="org.openl.rules.ruleservice.databinding.ServiceDescriptionConfigurationBooleanFactoryBean"
		scope="prototype" >
		<property name="propertyName" value="aegisdatabinding.readXsiTypes"/>
		<property name="defaultValue" value="${ruleservice.aegisbinding.readXsiTypes}"/>
	</bean>

	<bean id="serviceDescriptionConfigurationWriteXsiTypesFactoryBean"
		class="org.openl.rules.ruleservice.databinding.ServiceDescriptionConfigurationBooleanFactoryBean"
		scope="prototype">
		<property name="propertyName" value="aegisdatabinding.writeXsiTypes"/>
		<property name="defaultValue" value="${ruleservice.aegisbinding.writeXsiTypes}"/>
	</bean>
	
	<bean id="aegisDatabindingFactoryBean"
		class="org.openl.rules.ruleservice.databinding.AegisDatabindingFactoryBean"
		scope="prototype">
		<property name="readXsiTypes" ref="serviceDescriptionConfigurationReadXsiTypesFactoryBean" />
		<property name="writeXsiTypes" ref="serviceDescriptionConfigurationWriteXsiTypesFactoryBean" />
		<property name="overrideTypes" ref="serviceDescriptionConfigurationRootClassNamesBindingFactoryBean"/>
		<property name="supportVariations" ref="serviceDescriptionConfigurationSupportVariationsFactoryBean" />
	</bean>
	
	<bean id="webServicesDataBinding" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean" scope="prototype">
		<property name="targetObject" ref="aegisDatabindingFactoryBean"/>
		<property name="targetMethod" value="createAegisDatabinding"/>
		<property name="singleton" value="false"/>
	</bean>
	
	<!-- <bean id="dataBinding" class="org.apache.cxf.jaxb.JAXBDataBinding" 
		scope="prototype"> <property name="contextProperties"> <map> <entry> <key> 
		<util:constant static-field="com.sun.xml.bind.api.JAXBRIContext.ANNOTATION_READER" 
		/> </key> <bean class="org.jvnet.annox.xml.bind.AnnoxAnnotationReader" /> 
		</entry> </map> </property> </bean> -->


	<!-- Main description for the one WebService -->
	<!-- All configurations for server (like a data binding type and interceptors) 
		are represented there. ServerFactoryBean configuration is similar to a CXF 
		simple frontend configuration(see http://cxf.apache.org/docs/simple-frontend-configuration.html) 
		but without namespace "simple". -->

	<bean id="webServicesLoggingFeature" class="org.openl.rules.ruleservice.logging.LoggingFeature">
		<property name="loggingEnabled" value="${ruleservice.logging.enabled}" />
	</bean>
	
	<bean id="webServicesServerPrototype" class="org.apache.cxf.jaxws.JaxWsServerFactoryBean"
		scope="prototype">
		<property name="dataBinding" ref="webServicesDataBinding" />
		<property name="features">
			<list>
				<!-- Comment/Uncomment following block for use/unuse logging feature. 
					It can increase performance if logging isn't used. -->
				<ref bean="webServicesLoggingFeature" />
			</list>
		</property>
	</bean>

	<!-- Prototypes factory. It will create new server prototype for each new 
		WebService. -->
	<bean id="webServicesServerPrototypeFactory"
		class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
		<property name="targetBeanName">
			<idref bean="webServicesServerPrototype" />
		</property>
	</bean>

	<!-- Initializes OpenL Engine instances according to web services configuration 
		description and calls DeploymentAdmin to expose corresponding web service -->
	<!-- Exposes web services. -->
	<bean id="webServiceRuleServicePublisher"
		class="org.openl.rules.ruleservice.publish.JAXWSRuleServicePublisher">
		<property name="serverFactory" ref="webServicesServerPrototypeFactory" />
		<property name="baseAddress" value="${ruleservice.baseAddress}" />
		<property name="storeLoggingFeatureFactoryBean" ref="storeLoggingFeaturePrototypeFactory"/>
		<property name="loggingStoreEnable" value="${ruleservice.logging.store.enabled}"/>
		<property name="publisherType" value="WEBSERVICE"/>
	</bean>

</beans>